apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'


def getTwitterKeys() {
    def file = rootProject.file("twitter.properties")
    def fileProperties = new Properties()

    fileProperties.load(new FileInputStream(file))
    fileProperties
}

def twttr = getTwitterKeys()

android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    androidExtensions {
        experimental = true
    }
    defaultConfig {
        applicationId "com.janeullah.textextractorfrommedia"
        //21 - S4
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes.each {
        it.buildConfigField 'String', 'TWITTER_CONSUMER_KEY', twttr['consumer_key']
        it.buildConfigField 'String', 'TWITTER_CONSUMER_SECRET', twttr['consumer_secret']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "com.android.support:design:$supportLibraryVersion"

    //https://developer.android.com/guide/topics/ui/layout/recyclerview
    implementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    //https://developer.android.com/training/material/palette-colors
    implementation "com.android.support:palette-v7:$supportLibraryVersion"

    api "com.google.guava:guava:$guavaVersion"

    //https://github.com/twitter/twitter-kit-android/wiki/Getting-Started
    implementation "com.twitter.sdk.android:twitter-core:$twitterCoreVersion"

    //networking https://developer.android.com/training/volley/
    implementation "com.android.volley:volley:$volleyVersion"

    //https://codelabs.developers.google.com/codelabs/mlkit-android/#5
    //https://firebase.google.com/docs/ml-kit/android/recognize-text
    implementation "com.google.firebase:firebase-ml-vision:$firebaseMlVersion"
    implementation "com.google.firebase:firebase-core:$firebaseCoreVersion"

    //https://developer.android.com/topic/performance/graphics/load-bitmap
    //https://github.com/bumptech/glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    //https://developer.android.com/training/testing/junit-runner
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"

    // Optional -- Hamcrest library
    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"

    // Optional -- UI testing with UI Automator
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    // Required for instrumented tests
    androidTestImplementation "com.android.support:support-annotations:$supportLibraryVersion"

    //https://github.com/robolectric/robolectric-samples
    testImplementation "org.robolectric:robolectric:$roboelectricVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rulesVersion"
    androidTestUtil "com.android.support.test:orchestrator:$runnerVersion"

    // Espresso UI Testing dependencies.
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"

}

apply plugin: 'com.google.gms.google-services'
